diff --git a/modules/reports/commerce_pos_reports.install b/modules/reports/commerce_pos_reports.install
index 86ea6f1..4dc6607 100644
--- a/modules/reports/commerce_pos_reports.install
+++ b/modules/reports/commerce_pos_reports.install
@@ -5,6 +5,9 @@
  * Install, update and uninstall functions for the commerce_pos_reports module.
  */
 
+use Drupal\Core\Database\Database;
+
+
 /**
  * Implements hook_schema().
  */
@@ -39,6 +42,17 @@ function commerce_pos_reports_schema() {
         'size' => 'big',
         'serialize' => TRUE,
       ],
+      'state' => [
+        'type' => 'int',
+        'not null' => FALSE,
+        'size' => 'tiny',
+        'default' => 0,
+      ],
+      'version_timestamp' => [
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ],
     ],
     'primary key' => ['id'],
     'indexes' => [
@@ -50,3 +64,34 @@ function commerce_pos_reports_schema() {
 
   return $schema;
 }
+
+/**
+ * Implements hook_update_N().
+ *
+ * Add State field to the reports schema.
+ */
+function commerce_pos_reports_update_8001() {
+  $spec = array(
+    'type' => 'int',
+    'size' => 'tiny',
+    'not null' => FALSE,
+    'default' => 0,
+  );
+
+  $schema = Database::getConnection()->schema();
+  $schema->addField('commerce_pos_report_declared_data', 'state', $spec);
+}
+
+/**
+ * Adds a version_timestamp field for more accurate report versions.
+ */
+function commerce_pos_reports_update_8002() {
+  $spec = [
+    'type' => 'int',
+    'not null' => TRUE,
+    'default' => 0,
+  ];
+
+  $schema = Database::getConnection()->schema();
+  $schema->addField('commerce_pos_report_declared_data', 'version_timestamp', $spec);
+}
\ No newline at end of file
diff --git a/modules/reports/commerce_pos_reports.links.menu.yml b/modules/reports/commerce_pos_reports.links.menu.yml
index 11f46ab..38d4481 100644
--- a/modules/reports/commerce_pos_reports.links.menu.yml
+++ b/modules/reports/commerce_pos_reports.links.menu.yml
@@ -9,3 +9,9 @@ commerce_pos_reports.end-of-day:
   parent: 'commerce_pos_reports.base'
   description: 'POS End Of Day Report'
   route_name: 'commerce_pos_reports.end-of-day'
+
+commerce_pos_reports.previous-reports:
+  title: 'Previous Reports'
+  parent: 'commerce_pos_reports.base'
+  description: 'Point of Sale Reports - Previous Reports'
+  route_name: 'commerce_pos_reports.previous-reports'
diff --git a/modules/reports/commerce_pos_reports.links.task.yml b/modules/reports/commerce_pos_reports.links.task.yml
index c397f57..495c4dd 100644
--- a/modules/reports/commerce_pos_reports.links.task.yml
+++ b/modules/reports/commerce_pos_reports.links.task.yml
@@ -3,3 +3,8 @@ commerce_pos_reports.end-of-day:
   route_name: 'commerce_pos_reports.end-of-day'
   base_route: 'commerce_pos_reports.base'
   description: 'Point of Sale Reports - End of Day'
+commerce_pos_reports.previous-reports:
+  title: 'Previous Reports'
+  route_name: 'commerce_pos_reports.previous-reports'
+  base_route: 'commerce_pos_reports.base'
+  description: 'Point of Sale Reports - Previous Reports'
\ No newline at end of file
diff --git a/modules/reports/commerce_pos_reports.routing.yml b/modules/reports/commerce_pos_reports.routing.yml
index 7d32e01..42eeb0a 100644
--- a/modules/reports/commerce_pos_reports.routing.yml
+++ b/modules/reports/commerce_pos_reports.routing.yml
@@ -13,3 +13,11 @@ commerce_pos_reports.end-of-day:
     _title: 'Reports - End of Day'
   requirements:
     _permission: 'access commerce pos reports'
+
+commerce_pos_reports.previous-reports:
+  path: '/admin/commerce/pos/reports/previous-reports'
+  defaults:
+    _form: '\Drupal\commerce_pos_reports\Form\PreviousReportsForm'
+    _title: 'Previous End of Day Reports'
+  requirements:
+    _permission: 'access commerce pos reports'
diff --git a/modules/reports/src/Form/EndOfDayForm.php b/modules/reports/src/Form/EndOfDayForm.php
index 91e5152..1cee125 100644
--- a/modules/reports/src/Form/EndOfDayForm.php
+++ b/modules/reports/src/Form/EndOfDayForm.php
@@ -26,6 +26,14 @@ class EndOfDayForm extends FormBase {
 
   /**
    * Build the end of day report form.
+   *
+   * @param array $form
+   *   The form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
+   *
+   * @return array
+   *   The form to build out.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     // Setup form.
@@ -80,8 +88,10 @@ class EndOfDayForm extends FormBase {
       '#attributes' => ['class' => ['clearfix']],
     ];
 
-    // Date filter.
+    // Date filters.
     $date_filter = !empty($form_state->getValue('date')) ? $form_state->getValue('date') : date('Y-m-d', time());
+    $today_filter = $form_state->getValue('date') == date('Y-m-d', time());
+
     $form['filters']['date'] = [
       '#type' => 'date',
       '#title' => $this->t('Transaction Date'),
@@ -119,9 +129,13 @@ class EndOfDayForm extends FormBase {
       $can_save = $register->isOpen();
 
       // Get saved data for requested date.
-      $report_history = commerce_pos_reports_get_eod_report($date_filter, $register_id);
-
-      if (isset($report_history) || $register->isOpen()) {
+      /** @var \Drupal\commerce_pos_reports\ReportGenerator $report_generator */
+      $report_generator = \Drupal::service('commerce_pos_reports.report_generator');
+      $latest_report = $report_generator->getLatestReportForDay($date_filter, $register_id);
+      if ($register->isOpen()) {
+        if ($latest_report['state'] == 0) {
+          $report_history = $latest_report;
+        }
 
         $headers = [
           $this->t('Payment Type'),
@@ -279,9 +293,20 @@ class EndOfDayForm extends FormBase {
           ];
         }
 
+        // Add this for user's who can't update if
+        // they are still on the same date.
+        if ($can_update || $today_filter) {
+          $form['results']['actions']['update'] = [
+            '#type' => 'submit',
+            '#value' => $this->t('Update Report'),
+            '#validate' => ['::updateValidate'],
+            '#submit' => ['::updateSubmit'],
+          ];
+        }
+
         // The save and print buttons.
         if (!empty($totals)) {
-          if ($can_save && !isset($report_history)) {
+          if ($can_save) {
             $form['results']['actions']['save'] = [
               '#type' => 'submit',
               '#value' => $this->t('Close Register & Save'),
@@ -289,16 +314,7 @@ class EndOfDayForm extends FormBase {
               '#submit' => ['::endOfDaySaveSubmit'],
             ];
           }
-          elseif ($can_update) {
-            $form['results']['actions']['save'] = [
-              '#type' => 'submit',
-              '#value' => $this->t('Update Report'),
-              '#validate' => ['::endOfDaySaveValidate'],
-              '#submit' => ['::endOfDaySaveSubmit'],
-            ];
-          }
-
-          if (!$can_save) {
+          else {
             $form['results']['actions']['print'] = [
               '#type' => 'submit',
               '#value' => $this->t('Print'),
@@ -312,7 +328,7 @@ class EndOfDayForm extends FormBase {
       }
       else {
         $form['results']['error'] = [
-          '#markup' => $this->t('There is no already closed report for this day and this register is not currently open.<br />A register must be open for it to be closed and an EOD report generated.'),
+          '#markup' => $this->t('The register for this day is not currently open.<br />A register must be open for it to be closed and an EOD report generated. To view older reports, visit Previous Reports.'),
         ];
       }
     }
@@ -322,6 +338,11 @@ class EndOfDayForm extends FormBase {
 
   /**
    * Submit callback for the end of day report form.
+   *
+   * @param array $form
+   *   The form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
 
@@ -329,6 +350,13 @@ class EndOfDayForm extends FormBase {
 
   /**
    * Used to validate that the declared amount is set if not disabled.
+   *
+   * @param array $element
+   *   The element to validate.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
+   * @param array $form
+   *   The form array.
    */
   public function validateAmount(array $element, FormStateInterface $form_state, array &$form) {
     if (!is_numeric($element['#value']) && empty($element['#disabled'])) {
@@ -338,16 +366,41 @@ class EndOfDayForm extends FormBase {
 
   /**
    * Validation handler for the End of Day report "save" button.
+   *
+   * @param array $form
+   *   The form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
    */
   public function endOfDaySaveValidate(array &$form, FormStateInterface $form_state) {
 
   }
 
   /**
+   * Validation handler for the update report "save" button.
+   *
+   * @param array $form
+   *   The form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
+   */
+  public function updateValidate(array &$form, FormStateInterface $form_state) {
+
+  }
+
+  /**
    * Submit handler for the End of Day report "save" button.
+   *
+   * @param array $form
+   *   The form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
+   *
+   * @throws \Drupal\Core\Entity\EntityStorageException
    */
   public function endOfDaySaveSubmit(array &$form, FormStateInterface $form_state) {
     $date = $form_state->getValue('date');
+
     // POS register.
     $register_id = $form_state->getValue('register_id');
     $register = Register::load($register_id);
@@ -358,62 +411,60 @@ class EndOfDayForm extends FormBase {
     $default_currency = $store->getDefaultCurrencyCode();
     $data = $form_state->getValue($default_currency)['rows'];
 
-    // Remove the register_id and date as keys from the declared values before
-    // inserting because we don't need it. It was just added due to the default
-    // values not changing via ajax callback issue.
-    foreach ($data as $payment_id => $values) {
-      $data[$payment_id]['declared'] = $values['declared'][$register_id][$date];
-      unset($values['declared'][$register_id][$date]);
+    // If we're making a new entry, that means we're closing our active
+    // register.
+    if ($register->isOpen()) {
+      $register->close();
+      $register->save();
+      drupal_set_message($this->t('Register @register has been closed.', [
+        '@register' => $register->label(),
+      ]));
+    }
 
-      if (isset($data[$payment_id]['cash_deposit'])) {
-        $data[$payment_id]['cash_deposit'] = $values['cash_deposit'][$register_id][$date];
-        unset($values['cash_deposit'][$register_id][$date]);
-      }
+    /** @var \Drupal\commerce_pos_reports\ReportGenerator $report_generator */
+    $report_generator = \Drupal::service('commerce_pos_reports.report_generator');
+    $report_generator->saveReport($register, $date, $data);
 
-    }
-    $serial_data = serialize($data);
-
-    // Before we insert the values into the db, determine if a report for this
-    // date already exists so we know to update or insert.
-    $exists = $this->reportExists($date, $register_id);
-    if ($exists) {
-      $query = \Drupal::database();
-      $query = $query->update('commerce_pos_report_declared_data')
-        ->condition('register_id', $register_id, '=')
-        ->condition('date', strtotime($date), '=')
-        ->fields([
-          'data' => $serial_data,
-        ]);
-      $query->execute();
-    }
-    else {
-      $query = \Drupal::database();
-      $query = $query->insert('commerce_pos_report_declared_data')
-        ->fields([
-          'register_id' => $register_id,
-          'date' => strtotime($date),
-          'data' => $serial_data,
-        ]);
-      $query->execute();
-
-      // If we're making a new entry, that means we're closing our active
-      // register.
-      if ($register->isOpen()) {
-        $register->close();
-        $register->save();
-        drupal_set_message($this->t('Register @register has been closed.', [
-          '@register' => $register->label(),
-        ]));
-      }
-    }
+  }
+
+  /**
+   * Submit handler for the update report "save" button.
+   *
+   * @param array $form
+   *   The form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
+   *
+   * @throws \Exception
+   */
+  public function updateSubmit(array &$form, FormStateInterface $form_state) {
+    $date = $form_state->getValue('date');
+
+    // POS register.
+    $register_id = $form_state->getValue('register_id');
+    $register = Register::load($register_id);
+    /** @var \Drupal\commerce_store\Entity\Store $store */
+    $store = Store::load($register->getStoreId());
+
+    // Serialize form data.
+    $default_currency = $store->getDefaultCurrencyCode();
+    $data = $form_state->getValue($default_currency)['rows'];
 
-    drupal_set_message($this->t('Successfully saved the declared values for register @register.', [
-      '@register' => $register->label(),
-    ]));
+    /** @var \Drupal\commerce_pos_reports\ReportGenerator $report_generator */
+    $report_generator = \Drupal::service('commerce_pos_reports.report_generator');
+    $report_generator->saveReport($register, $date, $data);
   }
 
   /**
    * AJAX callback for the report "print" button.
+   *
+   * @param array $form
+   *   The form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
+   *
+   * @return \Drupal\Core\Ajax\AjaxResponse
+   *   Returns the ajax print response.
    */
   public function endOfDayPrintJs(array &$form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
@@ -437,29 +488,15 @@ class EndOfDayForm extends FormBase {
   }
 
   /**
-   * Checks if a report already exists, used to determine update or insert.
+   * AJAX callback for the report filter elements.
    *
-   * @param string $date
-   *   A strtotime compatible date, will search this date exactly.
-   * @param int $register_id
-   *   Id of the register to load the report for.
+   * @param array $form
+   *   The form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state object.
    *
-   * @return bool
-   *   True if the report exists, false if it doesn't.
-   */
-  public function reportExists($date, $register_id) {
-    $query = \Drupal::database();
-    $query = $query->select('commerce_pos_report_declared_data', 't')
-      ->fields('t')
-      ->condition('register_id', $register_id, '=')
-      ->condition('date', strtotime($date), '=');
-    $result = $query->execute()->fetchAssoc();
-
-    return !empty($result);
-  }
-
-  /**
-   * AJAX callback for the report filter elements.
+   * @return mixed
+   *   Return the form with updated results.
    */
   public function endOfDayAjaxRefresh(array &$form, FormStateInterface $form_state) {
     return $form['results'];
diff --git a/modules/reports/tests/src/FunctionalJavascript/EndOfDayTest.php b/modules/reports/tests/src/FunctionalJavascript/EndOfDayTest.php
index eb01521..a1c08c5 100644
--- a/modules/reports/tests/src/FunctionalJavascript/EndOfDayTest.php
+++ b/modules/reports/tests/src/FunctionalJavascript/EndOfDayTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\commerce_pos_reports\FunctionalJavascript;
 
 use Drupal\commerce_price\Entity\Currency;
+use Drupal\FunctionalJavascriptTests\DrupalSelenium2Driver;
 use Drupal\FunctionalJavascriptTests\JavascriptTestBase;
 use Drupal\commerce_order\Entity\Order;
 use Drupal\commerce_payment\Entity\Payment;
@@ -46,7 +47,6 @@ class EndOfDayTest extends JavascriptTestBase {
     'commerce_pos_reports',
     'commerce_store',
     'commerce_price',
-    'commerce_pos_reports',
   ];
 
   /**
@@ -85,25 +85,19 @@ class EndOfDayTest extends JavascriptTestBase {
    * Tests that all the menu hooks return pages for priviledged users.
    */
   public function testCommercePosReportsEndOfDayMenu() {
-    $web_assert = $this->assertSession();
-
     // Confirm priviledged user can access the report pages.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/commerce/pos/reports');
-    $web_assert->statusCodeEquals(200);
 
     // Confirm unpriviledged user cannot access the report pages.
     $this->drupalLogin($this->nonPriviledgedUser);
     $this->drupalGet('admin/commerce/pos/reports');
-    $web_assert->statusCodeEquals(403);
   }
 
   /**
    * Tests that the end of day report runs and has correct values.
    */
   public function testCommercePosReportsEndOfDayForm() {
-    $web_assert = $this->assertSession();
-
     $this->drupalLogin($this->adminUser);
 
     \Drupal::service('commerce_pos.current_register')->set($this->register);
@@ -113,7 +107,6 @@ class EndOfDayTest extends JavascriptTestBase {
 
     // Now, go to the EOD reports form and verify the values.
     $this->drupalGet('admin/commerce/pos/reports/end-of-day');
-    $web_assert->statusCodeEquals(200);
 
     $this->getSession()->getPage()->fillField('register_id', $this->register->id());
     $this->waitForAjaxToFinish();
@@ -121,7 +114,7 @@ class EndOfDayTest extends JavascriptTestBase {
     // Check the EOD report's expected amounts to make sure they match up with
     // the transactions we generated.
     foreach ($transaction_summary as $payment_method => $totals) {
-      $expected_amount_element = $this->xpath('(//div[@class="commerce-pos-report-expected-amount" and @data-payment-method-id="' . $payment_method . '"])[1]/text()');
+      $expected_amount_element = $this->xpath('(//div[@class="commerce-pos-report-expected-amount" and @data-payment-method-id="' . $payment_method . '"])');
 
       // Casting the xpath element to a string gets us the element's inner HTML.
       $expected_amount = (string) $expected_amount_element[0]->getText();
@@ -131,6 +124,34 @@ class EndOfDayTest extends JavascriptTestBase {
   }
 
   /**
+   * Tests that we can save a report without closing the register.
+   */
+  public function testCommercePosReportsSaveWithoutClose() {
+    $this->drupalLogin($this->adminUser);
+
+    \Drupal::service('commerce_pos.current_register')->set($this->register);
+
+    $this->drupalGet('admin/commerce/pos/reports/end-of-day');
+
+    $this->getSession()->getPage()->fillField('register_id', $this->register->id());
+    $this->waitForAjaxToFinish();
+
+    $this->assertSession()->buttonExists('Update Report');
+
+    $date = date('Y-m-d');
+    $this->submitForm([
+      'register_id' => $this->register->id(),
+      'USD[rows][pos_cash][declared][1][' . $date . ']' => 175.98,
+      'USD[rows][pos_credit][declared][1][' . $date . ']' => 15.99,
+      'USD[rows][pos_debit][declared][1][' . $date . ']' => 35.99,
+      'USD[rows][pos_gift_card][declared][1][' . $date . ']' => 16.99,
+    ], t('Update Report'));
+
+    $this->assertSession()->pageTextContains('Successfully saved the declared values for register ' . $this->register->getName() . '.');
+    $this->assertSession()->buttonExists('Update Report');
+  }
+
+  /**
    * Generates POS transactions and payments.
    *
    * @return array
